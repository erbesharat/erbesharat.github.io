[{"categories":null,"contents":" When I started working on my first issue on TXTDirect I had no idea how to even setup and use the project. Didn\u0026rsquo;t know anything about DNS and its concepts and was looking for a quick way to get familiar with the project. With the help of my colleagues I was able to start an instance CoreDNS and setup TXTDirect on my laptop. After running the dependencies and TXTDirect, it was the time to implement a simple scenario to see how it works.\nOne of the simple use cases of TXTDirect was giving fancy vanity URIs to my projects to get rid of memorizing the ports. For example you can have custom URIs like azathoth.frontend and azathoth.backend for your projects to be free from memorizing the port number of each running project on your machine.\nInstallation Before installing TXTDirect you need to first install CoreDNS or any other DNS server on your machine. To install CoreDNS, you can use your system\u0026rsquo;s package manager or compile the project from source. I personally prefer to compile every Go program from the source to check its code in the meanwhile and also always be sure that I\u0026rsquo;m using the latest version. But if you use an distro like Arch or Manjaro you\u0026rsquo;re safe cause you can always get the latest version from AUR.\nInstall CoreDNS from source To install CoreDNS from source you first have to clone it and then move the its directory and run the make command.\nNote: You have to install GNU\u0026rsquo;s make tool on your machine if you don\u0026rsquo;t have it already. You can run make -v command to see if you have it or not.\n$ git clone https://github.com/coredns/coredns $ cd coredns $ make  After running the make command you can find a binary file named coredns in the directory that you ran make command.\nTo be sure that everything is fine you can run ./coredns -version command.\nInstall TXTDirect You have two ways to install TXTDirect. One is to fetch the project from GitHub and compile it from source and the other way is to use our Docker image and run it inside a docker container.\nInstall TXTDirect from source Just like CoreDNS you should have GNU\u0026rsquo;s make tool to compile the project. Fetch the code using go get command and move to project\u0026rsquo;s directory inside your $GOPATH. Then run the make build command to compile the project for your distro.\n$ go get go.txtdirect.org/txtdirect $ cd $GOPATH/src/go.txtdirect.org/txtdirect $ make build  Then you can run the generated binary using $ ./txtdirect command to be sure everything works fine. It probably shows a server running on port 2015.\nInstall and use TXTDirect with Docker Just like the previous section, fetch the project using go get command and run the docker-run target using make instead of build.\n$ go get go.txtdirect.org/txtdirect $ cd $GOPATH/src/go.txtdirect.org/txtdirect $ make docker-run  When you run make docker-run it will start an container and builds TXTDirect, then uses the binary generated by the first container to create an Docker image which runs TXTDirect on Alpine. Then it will run an container with that image and an instance of TXTDirect is running inside that container.\nConfiguration After installing CoreDNS and TXTDirect it\u0026rsquo;s time to setup our DNS records and config TXTDirect. Generally if you want to add a domain and configure it in TXTDirect, you have to follow these steps:\n Add domain to hosts file aka /etc/hosts Add TXT records for it in your DNS zone Add domain to TXTDirect config  hosts file First of all you should add the domains that you want to use in your records to your OS\u0026rsquo; hosts file.\nFor the sake of simplicity, we will stick to Linux based machines in this tutorial. You can find the hosts file in the /etc/hosts. Open it with your favorite editor and add your domains like the example below:\n#\u0026lt;ip-address\u0026gt;\t\u0026lt;hostname.domain.org\u0026gt;\t\u0026lt;hostname\u0026gt; 127.0.0.1\tlocalhost.localdomain\tlocalhost\tlovecraft ::1\tlocalhost.localdomain\tlocalhost\tlovecraft # TXTDirect 127.0.0.1 azathoth.frontend 127.0.0.1 azathoth.backend 127.0.0.1 nyarlathotep.thetld 127.0.0.1 hastur.anothertld  DNS Records If you don\u0026rsquo;t have any ideas about how DNS works I suggest you to read this amazing article by Justin Ellingwood on DigitalOcean: An Introduction to DNS Terminology, Components, and Concepts\nSummary for those who don\u0026rsquo;t want to read a whole article:\nBasically when a DNS server recieves an request, it looks into a file called Zone File which hold the DNS records and looks for the right record for that request. Most of people will think a zone file only contains infomation about which domain points to which IP address. But there are lots of more DNS types for different tasks. One of those types that TXTDirect works with is TXT type. Basically a TXT resource record provides the ability to associate arbitrary text with a host or other name. The arbitary text can be anything you want, but in TXTDirect we have a set of standards for the TXT records that are a bit different in each redirect type.\nSample DNS records Here is an sample zone file that we use in this tutorial to use with CoreDNS and tell TXTDirect to find use these records to redirect the requests.\n@ 3600 IN SOA ns.example.com. domains.example.com. ( 2017202003 ; serial 5m ; refresh 5m ; retry 1w ; expire 12h ) ; minimum @ 86400 IN NS ns.example.net. @ 86400 IN NS ns.example.nl. azathoth.frontend. IN A 127.0.0.1 _redirect.azathoth.frontend. IN TXT \u0026quot;v=txtv0;to=http://127.0.0.1:3000;type=host;code=302\u0026quot; azathoth.backend. IN A 127.0.0.1 _redirect.azathoth.backend. IN TXT \u0026quot;v=txtv0;to=http://127.0.0.1:4000;type=host;code=302\u0026quot;  As you can see we define two records for each domain, one to point the domain to the IP address and one TXT record that contains TXTDirect\u0026rsquo;s record fields.\nTXTDirect TXT records As you can see in the sample zone file, there are key-value fields inside each TXT record. Each redirect type has it own set of fields to work with but since host is the simplest type it only needs to= field and code= field is optional.\nFields description:\n to=: The endpoint that you want to redirect the request. code: Redirect status code that will be used. v=: The TXTDirect\u0026rsquo;s record version.  For more information about redirect types and their fields you can check TXTDirect\u0026rsquo;s Documentation\nConfigure and start CoreDNS Now that we have a zone file we have to start CoreDNS and feed it with the records. To start CoreDNS you have to write a config file called Corefile and give it the path to your zone file.\nHere is an example of a Corefile:\n.:5353 { file ./path/to/zonefile zonefile forward . 8.8.8.8 errors stdout log }  The first line defines the port that CoreDNS listens to for DNS queries and the second line is the path to your zone file.\nNow to start the CoreDNS instance, run this command:\n$ coredns -conf ./Corefile  The output should be something like this:\n.:5353 2019-08-27T22:16:04.904+04:30 [INFO] CoreDNS-1.5.2 2019-08-27T22:16:04.904+04:30 [INFO] linux/amd64, go1.12, cfc4948f-dirty CoreDNS-1.5.2 linux/amd64, go1.12, cfc4948f-dirty  Configure and start TXTDirect Now that we have our zone file setup and a running instance of CoreDNS it\u0026rsquo;s time for configuring TXTDirect.\nCreate a file and name it whatever you want and paste this example in it.\nazathoth.frontend:80, azathoth.backend:80 { txtdirect { enable host resolver 127.0.0.1:5353 logfile stdout } log / stdout errors stdout }   azathoth.frontend:80, azathoth.backend:80:\nThis line tells TXTDirect to listen for which domains.\nImportant Note: Be sure to run TXTDirect with sudo since we don\u0026rsquo;t want to use ports anymore it should listen on port 80. Feel free to change the ports and don\u0026rsquo;t use sudo when running TXTDirect. txtdirect {} block:\nThis block is where the actual TXTDirect config will be written. enable host:\nThis line enables the host redirect type which is TXTDirect\u0026rsquo;s simplest type and basically it only redirects an incoming request to a specific endpoint with a custom status code defined in the TXT record. To learn about the other types you can check TXTDirect\u0026rsquo;s Documenation. resolver 127.0.0.1:5353:\nIn this line we tell TXTDirect to use our custom DNS resolver (The running CoreDNS instance) instead of system\u0026rsquo;s default resolver. logfile stdout: You can tell TXTDirect where to write its logs. Available options are [stdout, stderr and PathToAFile]. log and errors outside txtdirect block:\nThese configs belong to the running web server\u0026rsquo;s logs and errors.  Now to start TXTDirect you have to run this command:\n$ ./txtdirect -conf /path/to/config/file  Note: As I mentioned earilier, you have to run the command above with sudo if you want to use port 80 and don\u0026rsquo;t have to remember each project\u0026rsquo;s port.\nWell, that\u0026rsquo;s it! Now you have an instance of TXTDirect which redirect every incoming request for azathoth.frontend and azathoth.backend to their own endpoints that are specified in the zone file. Please feel free to checkout our documenation and learn more about the other redirect types. I will promise that you wouldn\u0026rsquo;t be disappointed cause we have lots of more types for managing your Go packages, Docker images and etc.\nHope this article was helpful for you. Since it\u0026rsquo;s my first blog post, please let me know if I had any problems either technical or grammer issues.\nP.S: Will write another article about how DNS works and what are its main concepts. Be sure to check my blog again in a few weeks (probably 2 weeks cause I already have plans for another post) for the article. Will try my best to keep it as simple as possible so everyone who don\u0026rsquo;t have any previous background in this field to understand the concepts.\n","permalink":"https://erbesharat.github.io/blog/txtdirect/local-vanity-urls/","tags":null,"title":"Fancy vanity URIs on your machine using TXTDirect"},{"categories":null,"contents":"This is going to be a new beginning. I decided to start writing after a long time and this time everything is different. This time it\u0026rsquo;s my personal blog, not a magazine and also it\u0026rsquo;s gonna be in English. It will probably be a lot more challenging for me cause English is not my first language and also I\u0026rsquo;m planning to write a few series that are much more technical than my previous articles.\nThink I\u0026rsquo;m gonna start by writing a series about how to use TXTDirect on your local machine to add some fancy features to your work environment. Also I will probably write a few posts about the challenges we face daily in our projects and how we fix them.\nI would be glad if you could send your comments about the future posts to my email. Also don\u0026rsquo;t hesitate to ask any questions about my posts or our projects. After all OSS is all about helping each other :)\n","permalink":"https://erbesharat.github.io/blog/general/hello-world/","tags":null,"title":"Hello World"},{"categories":null,"contents":null,"permalink":"https://erbesharat.github.io/","tags":null,"title":"Home"},{"categories":null,"contents":null,"permalink":"https://erbesharat.github.io/","tags":null,"title":"erbesharat's Blog"},{"categories":null,"contents":null,"permalink":"https://erbesharat.github.io/blog/","tags":null,"title":"Blogs"},{"categories":null,"contents":null,"permalink":"https://erbesharat.github.io/categories/","tags":null,"title":"Categories"},{"categories":null,"contents":null,"permalink":"https://erbesharat.github.io/tags/","tags":null,"title":"Tags"}]